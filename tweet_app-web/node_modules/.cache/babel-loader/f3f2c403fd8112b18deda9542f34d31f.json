{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blphu\\\\Personal Projects\\\\github\\\\tweet_app\\\\tweet_app-web\\\\src\\\\tweets\\\\list.js\";\nimport React, { useEffect, useState } from 'react';\nimport { apiTweetList } from './lookup';\nimport { Tweet } from './detail';\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error.\");\n        }\n      };\n\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      tweet: item,\n      didRetweet: handleDidRetweet,\n      className: \"mx-auto col-10 my-5 py-5 border bg-white text-dark\",\n      key: `${index}-{item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/blphu/Personal Projects/github/tweet_app/tweet_app-web/src/tweets/list.js"],"names":["React","useEffect","useState","apiTweetList","Tweet","TweetsList","props","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","results","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,YAAR,QAA2B,UAA3B;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,KAAK,GAAG,CAAC,GAAGP,KAAK,CAACQ,SAAV,EAAqBC,MAArB,CAA4BR,UAA5B,CAAd;;AACA,QAAIM,KAAK,CAACG,MAAN,KAAiBP,MAAM,CAACO,MAA5B,EAAoC;AAChCN,MAAAA,SAAS,CAACG,KAAD,CAAT;AACH;AACJ,GALQ,EAKN,CAACP,KAAK,CAACQ,SAAP,EAAkBL,MAAlB,EAA0BF,UAA1B,CALM,CAAT;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,YAAY,KAAK,KAArB,EAA4B;AAC1B,YAAMM,qBAAqB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAClD,YAAIA,MAAM,KAAK,GAAf,EAAoB;AAChBX,UAAAA,aAAa,CAACU,QAAQ,CAACE,OAAV,CAAb;AACAR,UAAAA,eAAe,CAAC,IAAD,CAAf;AACH,SAHD,MAGO;AACLS,UAAAA,KAAK,CAAC,qBAAD,CAAL;AACD;AACF,OAPD;;AAQAlB,MAAAA,YAAY,CAACG,KAAK,CAACgB,QAAP,EAAiBL,qBAAjB,CAAZ;AACD;AACF,GAZQ,EAYN,CAACV,UAAD,EAAaI,YAAb,EAA2BC,eAA3B,EAA4CN,KAAK,CAACgB,QAAlD,CAZM,CAAT;;AAcA,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACrC,UAAMC,gBAAgB,GAAG,CAAC,GAAGlB,UAAJ,CAAzB;AACAkB,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBF,QAAzB;AACAhB,IAAAA,aAAa,CAACiB,gBAAD,CAAb;AACA,UAAME,iBAAiB,GAAG,CAAC,GAAGlB,MAAJ,CAA1B;AACAkB,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BjB,MAA1B;AACAC,IAAAA,SAAS,CAACiB,iBAAD,CAAT;AACD,GAPD;;AAQA,SAAOlB,MAAM,CAACmB,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,wBAAO,oBAAC,KAAD;AACP,MAAA,KAAK,EAAED,IADA;AAEP,MAAA,UAAU,EAAEN,gBAFL;AAGP,MAAA,SAAS,EAAC,oDAHH;AAIP,MAAA,GAAG,EAAG,GAAEO,KAAM,YAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAKD,GANM,CAAP;AAOD","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n    useEffect(() => {\r\n      if (tweetsDidSet === false) {\r\n        const handleTweetListLookup = (response, status) => {\r\n          if (status === 200) {\r\n              setTweetsInit(response.results)\r\n              setTweetsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error.\")\r\n          }\r\n        }\r\n        apiTweetList(props.username, handleTweetListLookup)\r\n      }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      setTweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n    return tweets.map((item, index) => {\r\n      return <Tweet\r\n      tweet={item}\r\n      didRetweet={handleDidRetweet}\r\n      className='mx-auto col-10 my-5 py-5 border bg-white text-dark'\r\n      key={`${index}-{item.id}`}/>\r\n    })\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}